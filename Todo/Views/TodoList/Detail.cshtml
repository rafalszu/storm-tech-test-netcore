@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
    string orderBy = Model.OrderByRank ? "Importance" : "Rank";
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <ul class="list-group">

        <form name="contextform" method="post">
            @Html.HiddenFor(model => model.TodoListId)
            
            <li class="list-group-item">
                <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                    <strong>Add New Item</strong>
                </a>
                <div class="checkbox">
                    <label>
                        <input asp-for="HideDoneItems" onchange="form.submit();" />
                        @Html.DisplayNameFor(model => model.HideDoneItems)
                    </label>
                </div>
                @Html.HiddenFor(model => model.OrderByRank)
                <a href="#" onclick="return updateOrderBy();">Order by @orderBy</a>
            </li>
        </form>

        @foreach (var item in Model.Items)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass">
                
                <div class="row">

                <div class="col-md-8">
                    <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                        @if (item.IsDone)
                        {
                            <s>@item.Title</s>
                        }
                        else
                        {
                            <text>@item.Title</text>
                        }
                    </a>
                </div>

                <div class="col-md-4 text-right" data-userhash="@Gravatar.GetHash(item.ResponsibleParty.Email)">
                    <small>
                        <span class="username">@item.ResponsibleParty.UserName</span>
                        <span class="gravatarusername"></span>

                        <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30"/>

                    </small>
                </div>
                </div>

            </li>
        }
    </ul>
</div>

@section scripts {
    <script type="text/javascript">
        var gravatarDict = {};

        function updateOrderBy() {
            var item = document.getElementById("OrderByRank");
            if(item) {
                var itemvalue = (/true/i).test(item.value);
                item.value = !itemvalue;

                document.contextform.submit();
            }
        }

        function getProfilesPromise(key) {
            if(gravatarDict[key]) {
                console.log('returning key from local cache')
                return Promise.resolve(gravatarDict[key]);
            }
            else {
                console.log('querying gravatar.com')
                return fetch(`//en.gravatar.com/${key}.json`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(obj => {
                        if(obj && obj.entry && Array.isArray(obj.entry)) {
                            gravatarDict[key] = obj.entry[0];
                            return obj.entry[0];
                        }
                    });
            }
        }

        var userhashes = $('div[data-userhash]');
        userhashes.each(function() {
            var $item = $(this);
            var hash = $item.attr('data-userhash');
            getProfilesPromise(hash)
                .then(function(result) {
                    if(result) {
                        var span = $item.find('.gravatarusername');
                        if(span && span.length > 0) {
                            span.text(result.preferredUsername);
                        }
                    }
                })
                .catch(function(err) {
                    console.log(err);
                });
        });
  
</script>
}